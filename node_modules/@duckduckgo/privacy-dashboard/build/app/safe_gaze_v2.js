// Copyright 2023 The Kahf Browser Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

const onProcessImageMap = new Map();
var imageCount = 0;

window.safegazeOnDeviceModelHandler = safegazeOnDeviceModelHandler;
window.sendMessage = sendMessage;
window.updateBluredImageOpacity = updateBluredImageOpacity;

async function safegazeOnDeviceModelHandler(shouldBlur, index) {
    if (shouldBlur) {
        const imgElement = onProcessImageMap.get(index);
        onProcessImageMap.delete(index);
        imgElement.setAttribute('isSent', 'true');

        sendMessage("replaced"); // Update total blurred image count
    } else {
        let element = onProcessImageMap.get(index);
        onProcessImageMap.delete(index);
        unblurImage(element);
        element.removeAttribute('data-lazysrc');
        element.removeAttribute('srcset');
        element.removeAttribute('data-srcset');
        element.setAttribute('data-replaced', 'true');
    }
};

function sendMessage(message) {
    console.log(message);
    try {
        SafeGazeInterface.sendMessage(message)
    }
    catch {}
}

function removeSourceElementsInPictures() {
    const pictureElements = document.querySelectorAll('picture');

    pictureElements.forEach(picture => {
        const sourceElements = picture.querySelectorAll('source');
        sourceElements.forEach(source => {
            source.remove();
        });
    });
}

function blurImage(image) {
    image.style.filter = `blur(${window.blurIntensity * 10}px) grayscale(100%)`;
    image.setAttribute('isBlurred', 'true');
}

function unblurImageOnLoad(image) {
    image.onload = () => {
        image.style.filter = 'none';
    };
    image.setAttribute('isBlurred', 'false');
}

//Means that there is no object in image
function unblurImage(image) {
    image.style.filter = 'none';
    image.setAttribute('isBlurred', 'false');
}

function updateBluredImageOpacity() {
    const blurredElements = document.querySelectorAll('[isBlurred="true"]');
    blurredElements.forEach(element => {
        element.style.filter = `blur(${window.blurIntensity * 10}px)`;
    });
}

async function getImageElements() {
    try { 
    const minImageSize = 45; // Minimum image size in pixels

    const hasMinRenderedSize = (element) => {
        const rect = element.getBoundingClientRect();
        // 
        return rect.width >= minImageSize && rect.height >= minImageSize;
    };

    const processImage = (image) => {
        if (!hasMinRenderedSize(image)) return;
        blurImage(image);
        const src = image.src?.startsWith('://') ? 'https:' + image.src 
            : image.src?.startsWith('data:') ? image.src
            : image.src;
        sendMessage("coreML/-/" + src + "/-/" + imageCount);
        onProcessImageMap.set(imageCount, image);
        imageCount++;
    }

    // Scroll event listener
    const processElement = (el, srcChanged=false) => {
        try {
            
            if (!el.getAttribute) return;
            if (el.getAttribute('isProcessed') && !srcChanged) return; 
            el.setAttribute('isProcessed', 'true');
        
            const src = el.getAttribute('src');
            // const backgroundImage = el.style.backgroundImage;
            // const id = el.getAttribute('id');

            // if (el.parentElement?.classList.contains('captcha') || (id && id.includes('captcha'))) {
            // return;
            // }

            // if (backgroundImage && backgroundImage.startsWith("url(") && el.tagName !== "IMG" && !backgroundImage.includes('.svg')) {
            //     el.setAttribute('hasBackgroundImage', 'true');
            //     el.setAttribute('isSent', 'true');
            //     el.setAttribute('src', backgroundImage.slice(5, -2));
            //     processImage(el);
            // } else 
            
            if (src?.length > 0) {
                el.setAttribute('isSent', 'true');
                processImage(el);
            }
        } catch (e) {
            console.log(e);
        }

    }
    
    const fetchNewImages = (mutations) => {
        mutations.forEach(mutation => {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach(node => {
                    // if (node.nodeType !== Node.ELEMENT_NODE) return;
                    processElement(node);

                    // Process all child elements
                    if (!node.getElementsByTagName) return;
                    const allElements = node.getElementsByTagName('img');
                    for (let i = 0; i < allElements.length; i++) {
                        processElement(allElements[i]);
                    }
                });
            } else if (mutation.type === 'attributes') {
                const el = mutation.target;
                // el.setAttribute('isSent', 'true');
                // if (el.tagName === 'IMG')
                processElement(el, mutation.attributeName === 'src');
            }
        });
    }

            
    const observer = new MutationObserver(fetchNewImages)
    observer.observe(document, {
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ['src']
    });
} catch (e) {
    console.log(e);
}
}


getImageElements();
